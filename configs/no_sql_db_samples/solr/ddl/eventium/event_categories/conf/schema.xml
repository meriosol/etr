<?xml version="1.0" encoding="UTF-8" ?>
<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="Event categories" version="1.5">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         version="x.y" is Solr's version number for the schema syntax and
         semantics.  It should not normally be changed by applications.
         1.5: omitNorms defaults to true for primitive field types
              (int, float, boolean, string...)
       -->

    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldType.
             Class names starting with "solr" refer to java classes in a
           standard package such as org.apache.solr.analysis
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim.
           It supports doc values but in that case the field needs to be
           single-valued and either required or have a default value.
          -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

        <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>

    </types>

    <fields>
        <field name="code" type="string" indexed="true" stored="true" required="true" multiValued="false"/>
        <field name="name" type="string" indexed="true" stored="true" multiValued="false"/>
        <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
           or Solr won't start. _version_ and update log are required for SolrCloud
        -->
        <field name="_version_" type="long" indexed="true" stored="true"/>
    </fields>
    <!-- Field to use to determine and enforce document uniqueness.
         Unless this field is marked with required="false", it will be a required field
      -->
    <uniqueKey>code</uniqueKey>
    <!-- field for the QueryParser to use when an explicit fieldname is absent -->
    <defaultSearchField>name</defaultSearchField>
    <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
    <solrQueryParser defaultOperator="OR"/>
</schema>